import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.Color;
import java.util.LinkedList;

/**
 * A class representing a building
 */
public abstract class Tower extends MapObject {
  protected int cost;
  protected int range;
  protected double timeSinceShot;
  protected double fireRate; //The number of seconds between shots
  
  public Tower(int posX, int posY) {
    super(posX, posY);
  }
  
  //public int getDamage() {return damage;}
  //public void setDamage(int damage) {this.damage = damage;}
  public int getCost() {return cost;}
  //public void setCost(int cost) {this.cost = cost;}
  //public void setRange(int range) {this.range = range;}
  //public void setFireRate(double fireRate) {this.fireRate = fireRate;}
  
  public void showRange(Graphics g) {
    g.setColor(Color.GREEN);
    g.drawOval(posX-range+50, posY-range+50, range*2, range*2);
    return;
  }
  
  public Projectile shoot(LinkedList<Enemy> enemyList, double changeInTime) {
    Projectile p;
    timeSinceShot+=changeInTime;
    for (int i=0;i<enemyList.size();i++) {
      if (timeSinceShot<fireRate) { //Moved to inside the loop, so that tower no longer continues shooting after one time
        return null;
      }
      Enemy e = enemyList.get(i);
      double distance = Math.sqrt(Math.pow(((e.posX+50)-(this.posX+50)),2) + Math.pow(((e.posY+50)-(this.posY+50)),2));
      
      if (distance<range) {
        p = new Projectile(posX+50, posY+50, e.getX()+50, e.getY()+50); //Aims for center mass of enemy for increased accuracy
        timeSinceShot = 0;                                              //Projectile also starts at the center of the tile its tower is placed on
        return p;
      }
    }
    return null;
  }
  
  
}