import java.awt.Rectangle;
import java.util.LinkedList;
import java.util.Queue;
/**
 * A class representing an enemy
 */
public abstract class Enemy extends MapObject implements Moveable {
  /**
   * The health of the enemy
   */
  protected int health;
  /**
   * The damage the enemy deals to the player's headquarters building
   */
  protected int damage;
  /**
   * The number of points, or the money that the enemy is worth
   */
  protected int value;
  /**
   * Speed of the enemy, or the distance traveled in one frame
   */
  protected int speed;
  /**
   * A Rectangle object used to determine collisions with projectiles
   */
  protected Rectangle boundingBox;
  /**
   * A Queue containing all the Path tiles and their positions that the enemy must travel to
   */
  Queue<Tile> route; //Each enemy object should get a shallow copy of the route that needs to be followed
  
  /**
   * Creates a new enemy object
   * @param posX The starting x position of the enemy
   * @param posY The starting y position of the enemy
   * @param tileList A Queue containing all tiles the enemy must travel to
   */
  public Enemy(int posX, int posY, Queue<Tile> tileList) {
    super(posX, posY);
    boundingBox = new Rectangle(posX+10, posY, 70, 100); //Adding pixels will help the rectangle fit the specific enemy
    //Creating a shallow copy of the queue
    Queue<Tile>newRoute = new LinkedList<Tile>(tileList);
    this.route = newRoute;
  }
  
  /**
   * Gets the bounding box, used when detecting collisions
   * @return The Rectangle boundingBox
   */
  public Rectangle getBoundingBox() {return boundingBox;}
  
  /**
   * Gets the health of the enemy
   * @return Enemy's current health
   */
  public int getHealth() {return health;}
  
  /**
   * Sets the health of the enemy
   * @param health The new health of the enemy
   */
  public void setHealth(int health) {this.health = health;}
  
  /**
   * Gets the damage the enemy deals
   * @return Enemy damage
   */
  public int getDamage() {return damage;}
  
  /**
   * Gets the amount of credits/score the enemy is worth
   * @return The enemy value
   */
  public int getValue() {return value;}
  
  /**
   * Moves an enemy for one frame, updating its position on the map given the route it must follow
   */
  public void move() {
    if (route.isEmpty()) { //If there are no more coordinates left to move to, the method does not execute
      return;
    }
    Tile t = route.peek();
    int x = t.posX;
    int y = t.posY;
    
    if ((this.posX==x)&&(this.posY==y)) {
      route.remove();
    } else if ((this.posX==x)&&(this.posY<y)) {
      posY+=speed;
    } else if ((this.posX==x)&&(this.posY>y)) {
      posY-=speed;
    } else if ((this.posX>x)&&(this.posY==y)) {
      posX-=speed;
    } else if ((this.posX<x)&&(this.posY==y)) {
      posX+=speed;
    }
    boundingBox.setLocation(posX, posY); //Also must change position of rectangle along with the enemy image
  }
  
}